#!/usr/bin/python

# ================================================= #
#    Distributed Control Systems Monitor Main        #
# ================================================= #
#******************************************************************************
#  FILE          : main_dcsm.py
#  DESCRIPTION   : main program
#  CPU TYPE      : 
#  AUTHOR        : Miquel Perello Nieto
#  PROJECT       : 
#  COMPANY       : Automatic Control Department,
#                 Technical University of Catalonia
#
#     REVISION HISTORY:
#              VERSION: 1
#               AUTHOR: Miquel Perello Nieto
#                 DATE: December 2011
#             COMMENTS: Dynamical graphics was addapted from Yassine Benabbas in 
# http://knol.google.com/k/yassine-benabbas/cr%C3%A9er-un-graphe-dynamique-avec-pyplot/31z31ug7b5vz5/26#Code_source
# *****************************************************************************/

# used to parse files more easily
from __future__ import with_statement

# for command-line arguments
import sys

# for communicate with pic
import serial

# for recive data from pic
import array

# for sleep
import time

# to unpack the data that sends dsPIC
import struct

# to print binary vlaues to ascii
import binascii

# Qt4 bindings for core Qt functionalities (non-GUI)
from PyQt4 import QtCore
# Python Qt4 bindings for GUI objects
from PyQt4 import QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

import matplotlib
matplotlib.use('Qt4Agg')
import matplotlib.pyplot as plt

# import the MainWindow widget from the converted .ui files
from dcsmmainwindow import Ui_MainWindow

PORT = '/dev/ttyUSB0'
BAUDRATE = 115200
BYTESIZE = serial.EIGHTBITS
PARITY = serial.PARITY_NONE
STOPBITS = serial.STOPBITS_ONE
TIMEOUT = 10

#Result : self.ser = serial.Serial('/dev/ttyUSB0', 115200, timeout=10)

NUM_SAMPLES     = 305
#INPUT_DATA_SIZE = 23 # 71 / 23
STACK_SIZE = 30

GRAPH_REFRESH   = 5     # in miliseconds
STAT_REFRESH    = 500   # in miliseconds
DATA_TIME       = 4

ID_STOP         = 1
ID_MONITOR      = 0
ID_PERCENT      = 2
ID_DEVICES      = 4

YLIM            = 3
XLIM            = 3

class DesignerMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""
    timer_graph = QtCore.QTimer()
    timer_data = QtCore.QTimer()
    timer_statistics = QtCore.QTimer()
    
    INPUT_DATA_SIZE = 71 # 71 / 23
    # There are new data for the plot
    updated_data = 0
    # Serial handler, closed = 0
    ser = 0
    
    # TODO : he iniciat el valor de time, nomes per veure una grafica bona
    time = 0
    fps = 0
        
    #values for the graphic
    #xdata, ydata, ymax, ywarn, ymin, ycrit = [], [], [], [], [], []
    

    
    def __init__(self, parent = None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        
        self.translator = QtCore.QTranslator()
        self.translator.load('dcsmmainwindow_en.qm')
        QtGui.qApp.installTranslator(self.translator)
        
        self.setupUi(self)
        
        # connect the signals with the slots
        QtCore.QObject.connect(self.pushButton_connect, QtCore.SIGNAL("clicked()"), self.clicked_connect)
        QtCore.QObject.connect(self.pushButton_reload, QtCore.SIGNAL("clicked()"), self.update_graph)
        QtCore.QObject.connect(self.textBrowser, QtCore.SIGNAL("textChanged()"), self.move_scroll_bar_down)
        QtCore.QObject.connect(self.pushButton_monitor, QtCore.SIGNAL("clicked()"), self.toggled_monitor)
        QtCore.QObject.connect(self.pushButton_clear, QtCore.SIGNAL(_fromUtf8("clicked()")), self.clear_text)
        QtCore.QObject.connect(self.pushButton_reload, QtCore.SIGNAL(_fromUtf8("clicked()")), self.toggled_reload)
        QtCore.QObject.connect(self.pushButton_save, QtCore.SIGNAL(_fromUtf8("clicked()")), self.save_image)
        
        
        # Periodical tasks
        QtCore.QObject.connect(self.timer_graph, QtCore.SIGNAL("timeout()"), self.update_graph)
        QtCore.QObject.connect(self.timer_data, QtCore.SIGNAL("timeout()"), self.get_periodical_data)
        QtCore.QObject.connect(self.timer_statistics, QtCore.SIGNAL("timeout()"), self.update_statistics)
        
        # Changed Lenguage Signals
        QtCore.QObject.connect(self.actionCatala, QtCore.SIGNAL("triggered(bool)"), self.toggled_idiom)
        QtCore.QObject.connect(self.actionEspanol, QtCore.SIGNAL("triggered(bool)"), self.toggled_idiom)
        QtCore.QObject.connect(self.actionEnglish, QtCore.SIGNAL("triggered(bool)"), self.toggled_idiom)
        QtCore.QObject.connect(self.actionFrench, QtCore.SIGNAL("triggered(bool)"), self.toggled_idiom)
        
        # Changed Device comunication
        QtCore.QObject.connect(self.actionPC_Controlador, QtCore.SIGNAL("toggled(bool)"), self.toggled_comunication)
        QtCore.QObject.connect(self.actionPC_Monitor, QtCore.SIGNAL("toggled(bool)"), self.toggled_comunication)
        QtCore.QObject.connect(self.actionPC_Sensor_Actuador, QtCore.SIGNAL("toggled(bool)"), self.toggled_comunication)
        
        # Changed lines to show in the graph
        QtCore.QObject.connect(self.checkBox_R, QtCore.SIGNAL("clicked()"), self.force_update_graph)
        QtCore.QObject.connect(self.checkBox_U, QtCore.SIGNAL("clicked()"), self.force_update_graph)
        QtCore.QObject.connect(self.checkBox_x0, QtCore.SIGNAL("clicked()"), self.force_update_graph)
        QtCore.QObject.connect(self.checkBox_x1, QtCore.SIGNAL("clicked()"), self.force_update_graph)
        
        # Changed saturation percent value
        QtCore.QObject.connect(self.slider_saturation, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), self.percent_changed)
        #QtCore.QObject.connect(self.slider_saturation, QtCore.SIGNAL(_fromUtf8("sliderReleased()")), self.percent_released)
        
        
        #QtCore.QObject.connect(self.mplactionOpen, QtCore.SIGNAL('triggered()'), self.select_file)
        #QtCore.QObject.connect(self.mplactionQuit, QtCore.SIGNAL('triggered()'), QtGui.qApp, QtCore.SLOT("quit()"))
        
        # clear data of the serial port
        #self.ser.flushInput()
        # start timer data calculate
        #self.timer_data.start(20)
        # start timer graphic refresh
        #self.timer_graph.start(100)
        # activate the periodical update graph
        self.timer_statistics.start(STAT_REFRESH)
        

        self.referenceLine, = self.mplWidget.canvas.ax.plot([], [], animated=True, lw=1, color='blue',  label="r")
        self.x0Line,        = self.mplWidget.canvas.ax.plot([], [], animated=True, lw=2, color='orange',label="x0")
        self.x1Line,        = self.mplWidget.canvas.ax.plot([], [], animated=True, lw=1, color='grey',  label="x1")
        self.uLine,         = self.mplWidget.canvas.ax.plot([], [], animated=True, lw=2, color='red',   label="u")
        
        self.graf_t  = array.array('f')    # time value        Unsigned Long (4bytes)
        self.graf_r  = array.array('f')    # reference value    float (4bytes) 
        self.graf_x0 = array.array('f')    # x0 value            float (4bytes) 
        self.graf_x1 = array.array('f')    # x1 value            float (4bytes)
        self.graf_u  = array.array('f')    # u value            float (4bytes)
        
        self.lineEdit_state.setText(PORT)
        self.mplWidget.canvas.ax.set_ylim(-YLIM, YLIM)
        self.mplWidget.canvas.ax.set_xlim(-XLIM, 0)
    
        
        #self.listWidget_link.addItem("Prova TODO")
        #self.listWidget_link.addItem("00000000")
        
    def connect_serial(self):
        """Connects to the serial device, if not return 1"""
        if self.ser == 0:
            try:
                self.ser = serial.Serial(PORT, BAUDRATE, BYTESIZE, PARITY, STOPBITS, TIMEOUT)
                #self.ser = serial.Serial('/dev/ttyUSB0', 115200, timeout=10)
            except:
                self.textBrowser.append(QtGui.QApplication.translate("MainWindow", "\n\t----Failed to connect to the device----\n", None, QtGui.QApplication.UnicodeUTF8))
                return 0
        # this code shouldn't be never executed
        else:
            try:
                self.ser.open()
            except:
                self.textBrowser.append(QtGui.QApplication.translate("MainWindow", "\n\t----Failed to connect to the device----\n", None, QtGui.QApplication.UnicodeUTF8))
                return 0
        return 1
    
    def recive_data(self):
        """Get messages from the serial port"""
        # read all available data
        while self.ser.inWaiting() > self.INPUT_DATA_SIZE+1:
            data = array.array('c')
            # search the header
            data.append(self.ser.read(1))
            while data[0] != chr(1):
                data[0] = self.ser.read(1)
                
            # wait for all available data
            while self.ser.inWaiting() < (self.INPUT_DATA_SIZE-1):
                time.sleep(0.03);
                
            # recives data
            data = self.ser.read(self.INPUT_DATA_SIZE-1)
            
            # prove if you want graphical data
            if self.pushButton_monitor.isChecked():
                # decodes the data
                t  = struct.unpack('I', data[3]+data[2]+data[1]+data[0])
                r  = struct.unpack('f', data[4]+data[5]+data[6]+data[7])
                x0 = struct.unpack('f', data[8]+data[9]+data[10]+data[11])
                x1 = struct.unpack('f', data[12]+data[13]+data[14]+data[15])
                u  = struct.unpack('f', data[16]+data[17]+data[18]+data[19])
                
                self.time = t[0]*25e-9
                
                # prepare the string output
                aux_str  = " t = "+str(self.time)+"\t"
                aux_str += " r = "+str(r[0])+"\t"
                aux_str += " u = "+str(u[0])+"\t"
                aux_str += " x1 = "+str(x1[0])+"\t"
                aux_str += " x0 = "+str(x0[0])+"\n"
                # print string output
                self.textBrowser.insertPlainText(aux_str)
                
                # append data to the arrays
                self.graf_t.append(self.time)
                self.graf_r.append(r[0])
                self.graf_x0.append(x0[0])
                self.graf_x1.append(x1[0])
                self.graf_u.append(u[0])
                
                # remove one value if the arrays have maximum length
                if self.graf_t.buffer_info()[1] >= NUM_SAMPLES:
                    self.graf_t.pop(0)
                    self.graf_r.pop(0)
                    self.graf_x0.pop(0)
                    self.graf_x1.pop(0)
                    self.graf_u.pop(0)
                      
                # reload number of samples lavel
                self.label_samples_value.setText(str(self.graf_t.buffer_info()[1]))
                # reload number of waiting chars in serial rx buffer
                self.label_rx_buff_value.setText(str(self.ser.inWaiting()))

                # reload mutex area
                self.updated_data = 1
            
            # prove if there are available id's
            if (self.actionPC_Monitor.isChecked() and data[20] == chr(2)):
                # if it is true, looks how much id's
                i  = struct.unpack('B', data[21])

                if i[0] < STACK_SIZE:
                    for z in range(i[0]):
                        new_device = struct.unpack('B', data[z+22])
                        new_string = str(new_device[0])
                        
                        llista = self.listWidget_link.findItems(new_string, QtCore.Qt.MatchExactly)
                        if len(llista) == 0:
                            self.listWidget_link.addItem(new_string)
                        
        
    
    def force_update_graph(self):
        """Forces to update the graph"""
        self.updated_data = 1
        self.update_graph()    
    
    def update_graph(self):
        """Updates the graph"""
        # looks for new data
        if self.updated_data == 1:
                      
            self.mplWidget.canvas.ax.set_xbound(self.time-XLIM, self.time)
            self.mplWidget.canvas.draw()

            try:
                #Draw the lines
                if self.checkBox_R.isChecked():
                    self.referenceLine.set_data(self.graf_t, self.graf_r)
                    self.mplWidget.canvas.ax.draw_artist(self.referenceLine)
                if self.checkBox_x0.isChecked():
                    self.x0Line.set_data(self.graf_t, self.graf_x0)
                    self.mplWidget.canvas.ax.draw_artist(self.x0Line)
                if self.checkBox_U.isChecked():
                    self.uLine.set_data(self.graf_t, self.graf_u)
                    self.mplWidget.canvas.ax.draw_artist(self.uLine)
                if self.checkBox_x1.isChecked():
                    self.x1Line.set_data(self.graf_t, self.graf_x1)
                    self.mplWidget.canvas.ax.draw_artist(self.x1Line)
            except AssertionError:
                pass
                
            try:
                self.mplWidget.canvas.blit(self.mplWidget.canvas.ax.bbox)
            except AttributeError:
                pass
            
            self.fps = self.fps+1
            
            self.updated_data = 0
            
        if self.pushButton_monitor.isChecked() == 1:
            # activate the periodical update graph
            self.timer_graph.start(GRAPH_REFRESH)
        
    def get_periodical_data(self):
        """Updates the data"""
        if not self.pushButton_monitor.isChecked() and not self.pushButton_reload.isChecked():
            return
        
        if self.updated_data == 0 :
            # recive new serial data
            self.recive_data()
            
        # activate the periodical update graph
        self.timer_data.start(DATA_TIME)

        
    def update_percent(self):
        """Updates the value percentage of Bus Saturation"""
        
    def move_scroll_bar_down(self):
        """Moves down the scroll bar"""
        scroll = self.textBrowser.verticalScrollBar()
        scroll.setSliderPosition(scroll.maximum())
    
    def save_image(self):
        """Exports the graph into an image"""
        # open the dialog and get the selected file
        file_one = QtGui.QFileDialog.getSaveFileName(
             self,
             QtGui.QApplication.translate(
                "MainWindow", 
                "Supported formats:", 
                None, 
                QtGui.QApplication.UnicodeUTF8)+
                " emf, eps, pdf, png, ps, raw, rgba, svg, svgz", 
             "",
             "Enhanced MetaFile \t.emf (*.emf);; "+
             "Encapsulated PostScript \t.eps (*.eps);; "+
             "Portable Document Format \t.pdf (*.pdf);; "+
             "Portable Network Graphics \t.png (*.png);;"+
             "PostScript \t.ps (*.ps);; "+
             "RAW image file \t.raw (*.raw);; "+
             "Red Green Blue Alpha \t.rgba (*.rgba);; "+
             "Scalable Vector Graphics \t.svg (*.svg);; "+
             "Scalable Vector Graphics compressed \t.svgz (*.svgz)")
        # if a file is selected
        if file_one:
            # update the lineEdit text with the selected filename
            self.textBrowser.append(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "Saving to ", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8
                    )+file_one)

            plt.clf()
            # adding different plots if required
            if self.checkBox_R.isChecked():
                lines = plt.plot(self.graf_t, self.graf_r)
                plt.setp(lines[0], 
                         lw=1, 
                         label=str(
                            QtGui.QApplication.translate(
                                "MainWindow", 
                                "Reference",  
                                None, 
                                QtGui.QApplication.UnicodeUTF8)), 
                        color = 'blue')
                
            if self.checkBox_U.isChecked():
                lines = plt.plot(self.graf_t, self.graf_u)
                plt.setp(lines[0], 
                         lw=2, 
                         label=str(
                            QtGui.QApplication.translate(
                                "MainWindow", 
                                "Input",      
                                None, 
                                QtGui.QApplication.UnicodeUTF8)), 
                         color='red')
                
            if self.checkBox_x1.isChecked():
                lines = plt.plot(self.graf_t, self.graf_x1)
                plt.setp(lines[0], 
                         lw=1, 
                         label=str(
                            QtGui.QApplication.translate(
                                "MainWindow", 
                                "First Int.",  
                                None, 
                                QtGui.QApplication.UnicodeUTF8)), 
                         color='grey')
                
            if self.checkBox_x0.isChecked():
                lines = plt.plot(self.graf_t, self.graf_x0)
                plt.setp(lines[0], 
                         lw=2, 
                         label=str(
                            QtGui.QApplication.translate(
                                "MainWindow", 
                                "Second Int.", 
                                None, 
                                QtGui.QApplication.UnicodeUTF8)), 
                         color='orange')

            plt.axis([self.graf_t[0], self.graf_t[-1], -3, 3])
            
            plt.title(str(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "Double Integrator", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8)))
            
            plt.suptitle(str(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "Networked and Embedded Control Systems:", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8)))
            
            plt.xlabel(str(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "t (s)", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8)))
            
            plt.ylabel(str(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "Voltage (V)", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8)))
            
            plt.legend(bbox_to_anchor=(0, 1, 1, 0), loc=1, ncol=6, mode="expand", borderaxespad=0.)
                   
            filename = str(file_one)# + '.svg'
            try:
                plt.savefig(filename, dpi=300)
            except ValueError as e:
                print(e)
                self.textBrowser.append(str(e))
                self.textBrowser.append(
                    QtGui.QApplication.translate(
                        "MainWindow", 
                        "Trying to save as .svg", 
                        None, 
                        QtGui.QApplication.UnicodeUTF8))
                
                filename = str(file_one) + '.svg'
                plt.savefig(filename, dpi=300)
                pass
            except ImportError as e:
                print(e)
                self.textBrowser.append(str(e))
                self.textBrowser.append(
                    QtGui.QApplication.translate(
                        "MainWindow", 
                        "Trying to save as .svg", 
                        None, 
                        QtGui.QApplication.UnicodeUTF8))
                
                filename = str(file_one) + '.svg'
                plt.savefig(filename, dpi=300)
                pass
            except:
                self.textBrowser.append("Error al guardar la imatge")
            
            plt.clf()
            
            
    def toggled_monitor(self):
        """Starts or Stops reciving data"""
        if self.pushButton_monitor.isChecked():
            
            if not self.connect_serial():
                self.pushButton_monitor.setChecked(0)
                return
            
            self.textBrowser.insertPlainText(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "\n\t----NEW MONITORING----\n", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8))
            
            id_link = self.listWidget_link.selectedItems()
            if len(id_link):
                id_link = int(id_link[0].text())
            else:
                id_link = 1
            
            self.textBrowser.insertPlainText(QtGui.QApplication.translate("MainWindow", "link to monitor : ", None, QtGui.QApplication.UnicodeUTF8)+str(id_link)+"\n")
            
            word = struct.pack("BBBBBBBB", ID_MONITOR,0,0,0,0,0,0,id_link&0xFF)
        
            self.textBrowser.append(
                QtGui.QApplication.translate(
                    "MainWindow", 
                    "Sent : ", 
                    None, 
                    QtGui.QApplication.UnicodeUTF8)+
                        binascii.hexlify(word)+
                        "\n")
        
            self.ser.write(word)
             
            # clear data of the serial port
            self.ser.flushInput()
            # clear graph
            self.clean_graph()
            # start timer data reception
            self.get_periodical_data()
            # start timer graphic refresh
            self.update_graph()
            
            self.pushButton_save.setEnabled(False)
        else:
            # send Monitor
            word = struct.pack("BBBBBBBB", ID_MONITOR+ID_STOP,0,0,0,0,0,0,0)
        
            self.textBrowser.append(QtGui.QApplication.translate("MainWindow", "Sent : ", None, QtGui.QApplication.UnicodeUTF8)+binascii.hexlify(word)+"\n")
        
            self.ser.write(word)
            
            self.ser.flushInput()
            
            # reload number of waiting chars in serial rx buffer
            self.label_rx_buff_value.setText(str(self.ser.inWaiting()))
            
            self.textBrowser.insertPlainText(QtGui.QApplication.translate("MainWindow", "\n\t----END MONITORING----\n", None, QtGui.QApplication.UnicodeUTF8))
            
            self.pushButton_save.setEnabled(True)
            
            if (not self.pushButton_reload.isChecked()):
                self.timer_data.stop()
            self.timer_graph.stop()
            
    def clear_text(self):
        """Clear text of textBrowser"""
        self.textBrowser.clear()
        #self.ser.flushInput()
        #self.clean_graph()
            
    def clean_graph(self):
        """ Clean all old graphs"""
        #self.time = 0#
        
        # values of microcontroller
        #if self.graf_t.buffer_info()[1] != 0:
        for a in range(self.graf_t.buffer_info()[1]):
            self.graf_t.pop()
            
        for a in range(self.graf_r.buffer_info()[1]):
            self.graf_r.pop()

        for a in range(self.graf_x0.buffer_info()[1]):
            self.graf_x0.pop()

        for a in range(self.graf_x1.buffer_info()[1]):
            self.graf_x1.pop()

        for a in range(self.graf_u.buffer_info()[1]):
            self.graf_u.pop()
  
        self.referenceLine.set_data(self.graf_t, self.graf_r)
        self.x0Line.set_data(self.graf_t, self.graf_x0)
        self.x1Line.set_data(self.graf_t, self.graf_x1)
        self.uLine.set_data(self.graf_t, self.graf_u)
        
        try:
            #Draw the lines
            if self.checkBox_R.isChecked():
                self.mplWidget.canvas.ax.draw_artist(self.referenceLine)
            if self.checkBox_x0.isChecked():
                self.mplWidget.canvas.ax.draw_artist(self.x0Line)
            if self.checkBox_U.isChecked():
                self.mplWidget.canvas.ax.draw_artist(self.uLine)
            if self.checkBox_x1.isChecked():
                self.mplWidget.canvas.ax.draw_artist(self.x1Line)
        except AssertionError:
            pass
        try:
            self.mplWidget.canvas.blit(self.mplWidget.canvas.ax.bbox)
        except AttributeError:
            pass
            
         # force an image redraw
        self.mplWidget.canvas.draw()
        
    def update_statistics(self):
        """Update value of labels in statistics"""
        if self.ser != 0:
            # reload number of samples lavel
            self.label_samples_value.setText(str(self.graf_t.buffer_info()[1]))
            # reload number of waiting chars in serial rx buffer
            self.label_rx_buff_value.setText(str(self.ser.inWaiting()))
            
            self.label_fps_value.setText(str(self.fps*2))
            
            self.fps = 0
            
            if self.pushButton_monitor.isChecked() == 0:
                self.force_update_graph()
                
            if self.label_Est_value.text() != '(>_<)':
                self.label_Est_value.setText('(>_<)')
            else:
                self.label_Est_value.setText('(o_o)')
            
            self.label_T_value.setText(str(self.listWidget_link.count()))
            
            self.timer_statistics.start(STAT_REFRESH)

    
    def clicked_connect(self):
        if not self.pushButton_connect.isChecked():
            self.timer_graph.stop()
            self.timer_data.stop()
            self.timer_statistics.stop()
            self.ser.close()
            self.ser = 0
            self.lineEdit_state.setPalette(QtGui.QPalette(QtGui.QColor("gray")))
            self.lineEdit_state.setText(QtGui.QApplication.translate("MainWindow", "Disconnected", None, QtGui.QApplication.UnicodeUTF8))
            self.pushButton_connect.setText(QtGui.QApplication.translate("MainWindow", "Connect", None, QtGui.QApplication.UnicodeUTF8))
            self.pushButton_monitor.setEnabled(0)
            self.pushButton_monitor.setChecked(0)
            self.pushButton_reload.setEnabled(0)
            self.slider_saturation.setEnabled(0)
            
        else:
            if self.connect_serial():
                self.lineEdit_state.setPalette(QtGui.QPalette(QtGui.QColor("green")))
                self.lineEdit_state.setText(QtGui.QApplication.translate("MainWindow", "Connected", None, QtGui.QApplication.UnicodeUTF8))
                self.pushButton_connect.setText(QtGui.QApplication.translate("MainWindow", "Disconnect", None, QtGui.QApplication.UnicodeUTF8))
                self.pushButton_monitor.setEnabled(1)
                self.slider_saturation.setEnabled(1)
                if self.actionPC_Monitor.isChecked():
                    self.pushButton_reload.setEnabled(1)
            else:
                self.lineEdit_state.setPalette(QtGui.QPalette(QtGui.QColor("red")))
                self.lineEdit_state.setText(QtGui.QApplication.translate("MainWindow", "Error connecting", None, QtGui.QApplication.UnicodeUTF8))
                self.pushButton_connect.setChecked(0)
            
    
    def percent_changed(self, num):
        """Change de label percent value and send this information to the Monitor Flex"""
        self.label_percent_value.setNum(num)
        
        if not self.connect_serial():
                return
        
        if num != 0:
            word = struct.pack("BBBBBBBB", ID_PERCENT,0,0,0,0,0,0,num)
        else:
            word = struct.pack("BBBBBBBB", ID_PERCENT+ID_STOP,0,0,0,0,0,0,0)
        
        self.textBrowser.append(QtGui.QApplication.translate("MainWindow", "Sent : ", None, QtGui.QApplication.UnicodeUTF8)+binascii.hexlify(word)+"\n")
        
        self.ser.write(word)
        #self.textBrowser.append("Reciv : "+binascii.hexlify(self.ser.read(INPUT_DATA_SIZE)))
        
    def percent_released(self):
        """Change de label percent value and send this information to the Monitor Flex"""
        num = self.slider_saturation.value()
        #self.label_percent_value.setNum(num)
        
        if not self.connect_serial():
                return
            
        if num != 0:
            word = struct.pack("BBBBBBBB", ID_PERCENT,0,0,0,0,0,0,num)
        else:
            word = struct.pack("BBBBBBBB", ID_PERCENT+ID_STOP,0,0,0,0,0,0,0)
        
        self.textBrowser.append(QtGui.QApplication.translate("MainWindow", "Sent : ", None, QtGui.QApplication.UnicodeUTF8)+binascii.hexlify(word)+"\n")
        
        self.ser.write(word)
        #self.textBrowser.append("Reciv : "+binascii.hexlify(self.ser.read(INPUT_DATA_SIZE)))
    
    
    def toggled_reload(self):
        """Stops or Start to recive devices id's"""
        if not self.connect_serial():
            self.pushButton_reload.setChecked(0)
            return
            
        if self.pushButton_reload.isChecked():
            self.listWidget_link.clear()
            word = struct.pack("BBBBBBBB", ID_DEVICES,0,0,0,0,0,0,0)
            self.timer_data.start(DATA_TIME)
            
        else:
            word = struct.pack("BBBBBBBB", ID_DEVICES + ID_STOP,0,0,0,0,0,0,0)
            if (not self.pushButton_monitor.isChecked()):
                self.timer_data.stop()
            
        self.textBrowser.append(QtGui.QApplication.translate("MainWindow", "Sent : ", None, QtGui.QApplication.UnicodeUTF8)+binascii.hexlify(word)+"\n")
        
        self.ser.write(word)
        
            

    def toggled_idiom(self):
        """ Change the lenguage of the interface """
        QtGui.qApp.removeTranslator(self.translator)
        #print("Cambiando idioma a")
        if self.actionCatala.isChecked() and self.actionCatala.isEnabled():
            #print("Catala")
            cargado = self.translator.load('dcsmonitor_ca.qm')
        
            self.actionCatala.setEnabled(0)
            self.actionEspanol.setChecked(0)
            self.actionEspanol.setEnabled(1)
            self.actionEnglish.setChecked(0)
            self.actionEnglish.setEnabled(1)
            self.actionFrench.setChecked(0)
            self.actionFrench.setEnabled(1)
            
        elif self.actionEspanol.isChecked() and self.actionEspanol.isEnabled():
            #print("Espanol")
            cargado = self.translator.load('dcsmonitor_es.qm')
            
            self.actionEspanol.setEnabled(0)
            self.actionCatala.setChecked(0)
            self.actionCatala.setEnabled(1)
            self.actionEnglish.setChecked(0)
            self.actionEnglish.setEnabled(1)
            self.actionFrench.setChecked(0)
            self.actionFrench.setEnabled(1)
            
        elif self.actionEnglish.isChecked() and self.actionEnglish.isEnabled():
            #print("English")
            cargado = self.translator.load('dcsmonitor_en.qm')
            
            self.actionEnglish.setEnabled(0)
            self.actionCatala.setChecked(0)
            self.actionCatala.setEnabled(1)
            self.actionEspanol.setChecked(0)
            self.actionEspanol.setEnabled(1)
            self.actionFrench.setChecked(0)
            self.actionFrench.setEnabled(1)
            
        elif self.actionFrench.isChecked() and self.actionFrench.isEnabled():
            #print("French")
            cargado = self.translator.load('dcsmonitor_fr.qm')
            
            self.actionFrench.setEnabled(0)
            self.actionCatala.setChecked(0)
            self.actionCatala.setEnabled(1)
            self.actionEspanol.setChecked(0)
            self.actionEspanol.setEnabled(1)
            self.actionEnglish.setChecked(0)
            self.actionEnglish.setEnabled(1)
        else:
            #print("error")
            cargado = 0
        
        if cargado == 1:
            QtGui.qApp.installTranslator(self.translator)
            self.retranslateUi(self)
            #print("Idioma cambiado")
            
        
        
        #self.setupUi(self)
            
    def toggled_comunication(self):
        """ Change the devices environment """
        if self.actionPC_Monitor.isChecked() and self.actionPC_Monitor.isEnabled():
            self.actionPC_Monitor.setEnabled(0)
            self.actionPC_Sensor_Actuador.setChecked(0)
            self.actionPC_Sensor_Actuador.setEnabled(1)
            self.monitor_environment()
            
        elif self.actionPC_Sensor_Actuador.isChecked() and self.actionPC_Sensor_Actuador.isEnabled():
            self.actionPC_Sensor_Actuador.setEnabled(0)
            self.actionPC_Monitor.setChecked(0)
            self.actionPC_Monitor.setEnabled(1)
            self.actuator_environment()
    
    def actuator_environment(self):
        """Prepare environment to comunicate with sensor/actuator"""
        self.INPUT_DATA_SIZE = 23
        self.pushButton_reload.setEnabled(0)
        self.listWidget_link.setEnabled(0)
        self.listWidget_link.clear()
        
    def monitor_environment(self):
        """Prepare environment to comunicate with monitor"""
        self.INPUT_DATA_SIZE = 71
        if self.pushButton_connect.isChecked():
            self.pushButton_reload.setEnabled(1)
        self.listWidget_link.setEnabled(1)
            
# create the GUI application
app = QtGui.QApplication(sys.argv)

# instantiate the main window
dmw = DesignerMainWindow()

# show it
dmw.show()

# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())
